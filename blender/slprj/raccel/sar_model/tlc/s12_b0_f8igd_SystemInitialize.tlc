%implements s12_b0_f8igd_SystemInitialize "C"

%function SystemInitialize(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

static const int8_T tmp_e[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
atyvy0fxei *obj_p;
hgk1feukct *obj_i;
icyr5b5nuj *obj;
ppqqbropvd *obj_e;
real_T r;
int32_T buffIdx;
int32_T i;
uint32_T tmp;
int8_T tmp_p;
%closefile localVarDecl
%<SLibGetRootInportsFromFile(system, TLC_TRUE)>
%<SLibInsertAsyncTaskInitializeCode(system)>
%<SLibWriteMachineInitialize()>
rtDW.fvy4fevzjq.pPosition[0] = -400.0;
rtDW.fvy4fevzjq.pPreviousVelocity[0] = rtDW.fvy4fevzjq.pVelocity[0];
rtDW.fvy4fevzjq.pPosition[1] = 90.0;
rtDW.fvy4fevzjq.pPreviousVelocity[1] = rtDW.fvy4fevzjq.pVelocity[1];
rtDW.fvy4fevzjq.pPosition[2] = 0.0;
rtDW.fvy4fevzjq.pPreviousVelocity[2] = rtDW.fvy4fevzjq.pVelocity[2];
rtDW.m0at3cbtl2.pPosition[0] = 500.0;
rtDW.m0at3cbtl2.pPreviousVelocity[0] = rtDW.m0at3cbtl2.pVelocity[0];
rtDW.m0at3cbtl2.pPosition[1] = 1000.0;
rtDW.m0at3cbtl2.pPreviousVelocity[1] = rtDW.m0at3cbtl2.pVelocity[1];
rtDW.m0at3cbtl2.pPosition[2] = -1000.0;
rtDW.m0at3cbtl2.pPreviousVelocity[2] = rtDW.m0at3cbtl2.pVelocity[2];
for (i = 0; i < 9; i++) {
    tmp_p = tmp_e[i];
    rtDW.fvy4fevzjq.pOrientationAxes[i] = tmp_p;
    rtDW.m0at3cbtl2.pOrientationAxes[i] = tmp_p;
}
rtDW.nx3chzrjuc.pOutputStartPulseIndex = 1.0;
rtDW.nx3chzrjuc.pOutputPulseInterval[0] = 0.0;
rtDW.nx3chzrjuc.pOutputPulseInterval[1] = 1.0;
obj = &rtDW.aw1xd0e4zh;
if (rtDW.aw1xd0e4zh.cBuffer.isInitialized == 1) {
    memset(&rtDW.aw1xd0e4zh.cBuffer.pBuffer[0], 0, 167U * sizeof(creal_T));
    rtDW.aw1xd0e4zh.cBuffer.pStart = 1.0;
    rtDW.aw1xd0e4zh.cBuffer.pCount = 0.0;
}
obj_p = &rtDW.aw1xd0e4zh.cFractionalDelayFilter;
if (obj->cFractionalDelayFilter.isInitialized == 1) {
    obj_e = &obj->cFractionalDelayFilter.cSFunObject;
    /* System object Initialization function: dsp.VariableFractionalDelay */
    obj_p->cSFunObject.W0_BUFF_OFFSET = 100;
    buffIdx = 0;
    for (i = 0; i < 101; i++) {
        obj_e->W1_BUFF[buffIdx] = obj_e->P0_IC;
        buffIdx++;
    }
}
rtDW.cw3v0exiod.pRCS = rtDW.cw3v0exiod.MeanRCS;
obj_i = rtDW.fklv1ge0dn.cNoiseSource;
if (obj_i->isInitialized == 1) {
    r = %<(SLibCGCallSubFcn("h4a5bdsn23", [], 0, 46, 2))>;
    r = muDoubleScalarFloor(r * 65535.0) + 1.0;
    if (r < 4.294967296E+9) {
        if (r >= 0.0) {
            tmp = (uint32_T)r;
        } else {
            tmp = 0U;
        }
    } else if (r >= 4.294967296E+9) {
        tmp = MAX_uint32_T;
    } else {
        tmp = 0U;
    }
    %<(SLibCGCallSubFcn("gmhf0sow4r", ["obj_i->cRandStream.Generator", "tmp"], 0, 46, 1))>;
}
if (rtDW.otc1ywyo33.cMatchedFilter.isInitialized == 1) {
    %<(SLibCGCallSubFcn("ccmisves1x", ["&rtDW.otc1ywyo33.cMatchedFilter"], 0, 46, 0))>;
}
%<SLibInsertInitPeriodicCStatesFcn(system)>
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedSystemInitializeLocalVars", localVarDecl)>
%endfunction
%function SystemInitializeFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void SystemInitialize(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 46, fcnProtoType)>
%endfunction
